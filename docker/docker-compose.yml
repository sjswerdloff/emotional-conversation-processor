# Docker Compose configuration for Emotional Conversation Processor

version: "3.8"

services:
  # Qdrant vector database
  qdrant:
    image: qdrant/qdrant:v1.7.0
    container_name: ecp-qdrant
    ports:
      - "6333:6333"
      - "6334:6334" # gRPC port
    volumes:
      - qdrant_data:/qdrant/storage
      - ./qdrant/qdrant-config.yaml:/qdrant/config/production.yaml
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    command: ./qdrant --config-path /qdrant/config/production.yaml
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - ecp-network
    restart: unless-stopped

  # Main application
  ecp-app:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ecp-app
    depends_on:
      qdrant:
        condition: service_healthy
    environment:
      - ECP_ENV=production
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - PYTHONPATH=/app/src
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../config:/app/config
      - model_cache:/app/models
    working_dir: /app
    networks:
      - ecp-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "python", "scripts/health_check.py", "--qdrant-host", "qdrant"]
      interval: 60s
      timeout: 30s
      retries: 3
      start_period: 120s

  # Optional: API service (if using the web API)
  ecp-api:
    build:
      context: ..
      dockerfile: docker/Dockerfile
    container_name: ecp-api
    depends_on:
      qdrant:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - ECP_ENV=production
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - PYTHONPATH=/app/src
    volumes:
      - ../data:/app/data
      - ../logs:/app/logs
      - ../config:/app/config
      - model_cache:/app/models
    command: uvicorn src.emotional_processor.api.main:app --host 0.0.0.0 --port 8000
    networks:
      - ecp-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:v2.40.0
    container_name: ecp-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - ecp-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:9.3.0
    container_name: ecp-grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - ecp-network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  qdrant_data:
    driver: local
  model_cache:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  ecp-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

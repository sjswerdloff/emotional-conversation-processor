{
  "export_info": {
    "timestamp": "2025-06-04T12:30:00.000Z",
    "source": "Emotional Conversation Processor v2.0",
    "selectorConfig": {
      "version": "2.0.0",
      "description": "Enhanced conversation with emotional processing extensions"
    },
    "total_chats": 1,
    "total_messages": 4,
    "processing_metadata": {
      "emotional_processor_version": "2.0.0",
      "human_curator": "Stuart",
      "curation_timestamp": "2025-06-04T12:25:00.000Z",
      "source_model": "claude-4-sonnet-20250514"
    }
  },
  "chats": [
    {
      "id": "enhanced-chat-67890",
      "title": "Technical Discussion with Emotional Context",
      "timestamp": "2025-06-04T12:30:00.000Z",
      "url": "https://example.com/chat/enhanced-67890",
      "messageCount": 4,
      "messages": [
        {
          "role": "user",
          "content": "I'm struggling with a complex Python implementation. The code is working but it feels inelegant and I'm worried about performance.",
          "timestamp": "2025-06-04T12:30:00.000Z",
          "element_id": "user-message-0",
          "element_classes": "user-message",
          "word_count": 22,
          "emotional_metadata": {
            "emotion_score": 0.7,
            "technical_score": 0.8,
            "importance_weight": 0.6,
            "processing_status": "human_curated",
            "detected_emotions": ["concern", "frustration", "perfectionism"],
            "emotional_intensity": 0.6
          }
        },
        {
          "role": "assistant",
          "content": "I understand that feeling - the tension between working code and elegant code is real. Let me help you refactor this. Can you share the specific implementation you're concerned about?",
          "timestamp": "2025-06-04T12:30:01.000Z",
          "element_id": "assistant-message-1",
          "element_classes": "assistant-message",
          "word_count": 29,
          "emotional_metadata": {
            "emotion_score": 0.8,
            "technical_score": 0.6,
            "importance_weight": 0.7,
            "processing_status": "human_curated",
            "detected_emotions": ["empathy", "supportiveness", "understanding"],
            "emotional_intensity": 0.7
          }
        },
        {
          "role": "user",
          "content": "[User shares 50 lines of complex Python code with nested loops, multiple database queries, and unclear variable names]",
          "timestamp": "2025-06-04T12:30:02.000Z",
          "element_id": "user-message-2",
          "element_classes": "user-message",
          "word_count": 18,
          "emotional_metadata": {
            "emotion_score": 0.3,
            "technical_score": 0.9,
            "importance_weight": 0.5,
            "processing_status": "human_curated",
            "detected_emotions": ["vulnerability", "trust"],
            "emotional_intensity": 0.4
          },
          "vector_references": [
            {
              "type": "technical_summary",
              "vector_id": "tech-code-summary-001",
              "validation_hash": "sha256:abc123def456...",
              "fallback_summary": "Complex Python code with performance concerns - database queries in loops, unclear naming conventions"
            }
          ],
          "document_references": [
            {
              "type": "original_technical_data",
              "document_id": "couchdb-code-block-001",
              "size_bytes": 2847,
              "validation_hash": "sha256:def456ghi789...",
              "content_type": "python_code"
            }
          ]
        },
        {
          "role": "assistant",
          "content": "I can see several opportunities for improvement here. The core logic is sound, but we can definitely make this more elegant and performant. Here's how I'd approach the refactoring: [Assistant provides detailed refactoring suggestions with explanations]",
          "timestamp": "2025-06-04T12:30:03.000Z",
          "element_id": "assistant-message-3",
          "element_classes": "assistant-message",
          "word_count": 34,
          "emotional_metadata": {
            "emotion_score": 0.6,
            "technical_score": 0.9,
            "importance_weight": 0.9,
            "processing_status": "human_curated",
            "detected_emotions": [
              "helpfulness",
              "encouragement",
              "technical_confidence"
            ],
            "emotional_intensity": 0.6
          },
          "vector_references": [
            {
              "type": "technical_summary",
              "vector_id": "tech-refactor-advice-001",
              "validation_hash": "sha256:ghi789jkl012...",
              "fallback_summary": "Detailed refactoring advice for Python performance optimization - database query batching, variable naming, code structure"
            }
          ],
          "document_references": [
            {
              "type": "original_technical_data",
              "document_id": "couchdb-refactor-response-001",
              "size_bytes": 5432,
              "validation_hash": "sha256:jkl012mno345...",
              "content_type": "technical_advice"
            }
          ]
        }
      ]
    }
  ]
}

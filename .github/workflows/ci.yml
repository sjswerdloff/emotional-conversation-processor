name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]


env:
  PYTHON_VERSION: '3.11'

jobs:
  # Code quality checks
  lint:
    runs-on: ubuntu-latest
    name: Code Quality

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Run ruff linting
      run: uv run ruff check src/ tests/ scripts/

    - name: Run ruff formatting check
      run: uv run ruff format --check src/ tests/ scripts/

    - name: Run mypy type checking
      run: uv run mypy src/

  # Unit tests
  test:
    runs-on: ubuntu-latest
    name: Unit Tests
    strategy:
      matrix:
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl

    - name: Install Python dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Download spaCy model
      run: uv run python -m spacy download en_core_web_sm

    - name: Run unit tests
      run: |
        uv run pytest tests/unit/ -v \
          --cov=src/emotional_processor \
          --cov-report=xml \
          --cov-report=term-missing \
          --junit-xml=test-results.xml


  # Integration tests with Qdrant
  integration-test:
    runs-on: ubuntu-latest
    name: Integration Tests

    services:
      qdrant:
        image: qdrant/qdrant:v1.7.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Download spaCy model
      run: uv run python -m spacy download en_core_web_sm

    - name: Wait for Qdrant to be ready
      run: |
        timeout 60s bash -c 'until curl -f http://localhost:6333/health; do sleep 2; done'

    - name: Run integration tests
      run: |
        uv run pytest tests/integration/ -v \
          --junit-xml=integration-test-results.xml
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333

  # Performance tests
  performance-test:
    runs-on: ubuntu-latest
    name: Performance Tests
    if: github.event_name == 'schedule' || contains(github.event.head_commit.message, '[perf-test]')

    services:
      qdrant:
        image: qdrant/qdrant:v1.7.0
        ports:
          - 6333:6333
        options: >-
          --health-cmd "curl -f http://localhost:6333/health"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5
          --health-start-period 30s

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: |
        uv sync --dev
        uv pip install -e .

    - name: Download models
      run: |
        uv run python -m spacy download en_core_web_sm
        uv run python -c "from transformers import pipeline; pipeline('text-classification', model='j-hartmann/emotion-english-distilroberta-base')"
        uv run python -c "from sentence_transformers import SentenceTransformer; SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')"

    - name: Run performance tests
      run: |
        uv run pytest tests/performance/ -v \
          --junit-xml=performance-test-results.xml \
          -m "not slow"
      env:
        QDRANT_HOST: localhost
        QDRANT_PORT: 6333


  # Docker build test
  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        target: production
        push: false
        tags: ecp:test
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    name: Documentation

    steps:
    - uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v2
      with:
        version: "latest"

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install documentation dependencies
      run: |
        uv pip install sphinx sphinx-rtd-theme myst-parser

    - name: Build documentation
      run: |
        cd docs
        make html

    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/

  # Deployment (only on main branch)
  # deploy:
  #   needs: [lint, test, integration-test, docker-build]
  #   runs-on: ubuntu-latest
  #   name: Deploy
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #   - uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v3

  #   - name: Login to Docker Hub
  #     uses: docker/login-action@v3
  #     with:
  #       username: ${{ secrets.DOCKER_USERNAME }}
  #       password: ${{ secrets.DOCKER_PASSWORD }}

  #   - name: Build and push Docker image
  #     uses: docker/build-push-action@v5
  #     with:
  #       context: .
  #       file: docker/Dockerfile
  #       target: production
  #       push: true
  #       tags: |
  #         ${{ secrets.DOCKER_USERNAME }}/emotional-conversation-processor:latest
  #         ${{ secrets.DOCKER_USERNAME }}/emotional-conversation-processor:${{ github.sha }}
  #       cache-from: type=gha
  #       cache-to: type=gha,mode=max

  # Notification on failure
  notify-failure:
    needs: [lint, test, integration-test, performance-test, security, docker-build]
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'

    steps:
    - name: Notify failure
      run: |
        echo "CI/CD pipeline failed on main branch"
        # Add notification logic here (Slack, email, etc.)
